{"version":3,"file":"serviceWorker.bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACzFA;AAEA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://aiemailassistant/./utils/grammarCheck.js","webpack://aiemailassistant/./utils/openaiService.js","webpack://aiemailassistant/./utils/styleImprover.js","webpack://aiemailassistant/webpack/bootstrap","webpack://aiemailassistant/webpack/runtime/define property getters","webpack://aiemailassistant/webpack/runtime/hasOwnProperty shorthand","webpack://aiemailassistant/webpack/runtime/make namespace object","webpack://aiemailassistant/./background/serviceWorker.js"],"sourcesContent":["import { checkEmailWithGPT } from './openaiService';\n\nexport async function checkGrammar(text) {\n  const suggestions = await checkEmailWithGPT(text);\n  return suggestions.filter(suggestion => suggestion.type === 'grammar');\n}","let openaiApiKey = null;\n\nexport async function initializeApiKey() {\n  try {\n    const result = await chrome.storage.sync.get('openaiApiKey');\n    openaiApiKey = result.openaiApiKey;\n    return !!openaiApiKey;\n  } catch (error) {\n    console.error('Error initializing OpenAI API key:', error);\n    return false;\n  }\n}\n\nexport async function setApiKey(key) {\n  try {\n    await chrome.storage.sync.set({ openaiApiKey: key });\n    openaiApiKey = key;\n    return true;\n  } catch (error) {\n    console.error('Error saving OpenAI API key:', error);\n    return false;\n  }\n}\n\nexport async function checkEmailWithGPT(text) {\n  if (!openaiApiKey) {\n    const hasKey = await initializeApiKey();\n    if (!hasKey) {\n      throw new Error('OpenAI API key not configured');\n    }\n  }\n\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${openaiApiKey}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a professional email writing assistant. Analyze the email text for:\n1. Grammar issues\n2. Style improvements\n3. Tone and politeness\n4. Professional language\n\nProvide suggestions in the following JSON format:\n{\n  \"suggestions\": [\n    {\n      \"type\": \"grammar\"|\"style\"|\"tone\",\n      \"message\": \"description of the issue\",\n      \"original\": \"original text\",\n      \"replacement\": \"suggested replacement\"\n    }\n  ]\n}`\n          },\n          {\n            role: \"user\",\n            content: text\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 1000\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    try {\n      const suggestionText = data.choices[0].message.content;\n      const suggestions = JSON.parse(suggestionText);\n      return suggestions.suggestions;\n    } catch (parseError) {\n      console.error('Error parsing OpenAI response:', parseError);\n      return [];\n    }\n  } catch (error) {\n    console.error('Error calling OpenAI API:', error);\n    throw new Error('Failed to check email: ' + error.message);\n  }\n}","import { checkEmailWithGPT } from './openaiService';\n\nexport async function improveStyle(text) {\n  const suggestions = await checkEmailWithGPT(text);\n  return suggestions.filter(suggestion => suggestion.type === 'style' || suggestion.type === 'tone');\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { checkGrammar } from '../utils/grammarCheck';\nimport { improveStyle } from '../utils/styleImprover';\nimport { initializeApiKey } from '../utils/openaiService';\n\nlet hasApiKey = false;\n\n// Initialize context menu\nchrome.runtime.onInstalled.addListener(async () => {\n  console.log('Email Assistant: Extension installed');\n\n  // Check if API key is configured\n  hasApiKey = await initializeApiKey();\n\n  // Create context menu items\n  chrome.contextMenus.create({\n    id: 'emailAssistant',\n    title: 'Email Assistant',\n    contexts: ['selection']\n  });\n\n  chrome.contextMenus.create({\n    id: 'checkGrammar',\n    parentId: 'emailAssistant',\n    title: 'Check Grammar',\n    contexts: ['selection']\n  });\n\n  chrome.contextMenus.create({\n    id: 'improveStyle',\n    parentId: 'emailAssistant',\n    title: 'Improve Writing Style',\n    contexts: ['selection']\n  });\n});\n\n// Handle context menu clicks\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  if (!hasApiKey) {\n    chrome.tabs.sendMessage(tab.id, {\n      action: 'showError',\n      error: 'Please configure your OpenAI API key in the extension settings'\n    });\n    return;\n  }\n\n  if (!info.selectionText) {\n    chrome.tabs.sendMessage(tab.id, {\n      action: 'showError',\n      error: 'Please select some text to check'\n    });\n    return;\n  }\n\n  switch (info.menuItemId) {\n    case 'checkGrammar':\n      processSelectedText(tab.id, info.selectionText, 'grammar');\n      break;\n    case 'improveStyle':\n      processSelectedText(tab.id, info.selectionText, 'style');\n      break;\n  }\n});\n\nasync function processSelectedText(tabId, text, type) {\n  try {\n    console.log(`Email Assistant: Processing ${type} check for selected text`);\n    const suggestions = type === 'grammar'\n      ? await checkGrammar(text)\n      : await improveStyle(text);\n\n    chrome.tabs.sendMessage(tabId, {\n      action: 'showSuggestions',\n      suggestions\n    });\n  } catch (error) {\n    console.error('Email Assistant Error:', error);\n    chrome.tabs.sendMessage(tabId, {\n      action: 'showError',\n      error: `Failed to check text: ${error.message}`\n    });\n  }\n}\n\n// Handle messages from content script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.action === 'checkText') {\n    if (!hasApiKey) {\n      console.log('Email Assistant: No API key configured');\n      sendResponse({\n        grammar: [],\n        style: [],\n        error: 'OpenAI API key not configured. Please check your settings.'\n      });\n      return;\n    }\n\n    const text = message.text.trim();\n    if (!text) {\n      console.log('Email Assistant: No text provided for checking');\n      sendResponse({\n        grammar: [],\n        style: [],\n        error: 'No text provided for checking'\n      });\n      return;\n    }\n\n    console.log('Email Assistant: Processing text check request');\n    // Process text in background\n    Promise.all([\n      checkGrammar(text),\n      improveStyle(text)\n    ]).then(([grammar, style]) => {\n      console.log('Email Assistant: Got suggestions:', {\n        grammarCount: grammar?.length || 0,\n        styleCount: style?.length || 0\n      });\n\n      sendResponse({\n        grammar: grammar || [],\n        style: style || [],\n        error: null\n      });\n\n      // Send suggestions to popup if it's open\n      chrome.runtime.sendMessage({\n        action: 'updateSuggestions',\n        suggestions: [...(grammar || []), ...(style || [])]\n      }).catch(() => {\n        // Ignore error if popup is not open\n      });\n    }).catch(error => {\n      console.error('Email Assistant Error:', error);\n      let errorMessage = 'Failed to process text. ';\n\n      if (error.message.includes('API key')) {\n        errorMessage += 'Please check your OpenAI API key in the settings.';\n        hasApiKey = false;\n      } else if (error.message.includes('429')) {\n        errorMessage += 'Too many requests. Please try again later.';\n      } else if (error.message.includes('500')) {\n        errorMessage += 'OpenAI service is temporarily unavailable.';\n      } else {\n        errorMessage += 'Please try again later.';\n      }\n\n      sendResponse({\n        grammar: [],\n        style: [],\n        error: errorMessage\n      });\n    });\n\n    return true; // Will respond asynchronously\n  }\n});\n\n// Listen for API key changes\nchrome.storage.onChanged.addListener((changes, namespace) => {\n  if (namespace === 'sync' && changes.openaiApiKey) {\n    hasApiKey = !!changes.openaiApiKey.newValue;\n    console.log('Email Assistant: API key', hasApiKey ? 'configured' : 'removed');\n  }\n});"],"names":[],"sourceRoot":""}