{"version":3,"file":"emailEditor.bundle.js","mappingssources":["webpack://aiemailassistant/./content/emailEditor.js"],"sourcesContent":["// Content script for Gmail integration\nconst EMAIL_COMPOSER_SELECTOR = 'div[role=\"textbox\"][aria-label*=\"Message Body\"], div[role=\"textbox\"][aria-label*=\"Body\"], div[aria-label*=\"Message text\"], .Am.Al.editable';\nconst DEBOUNCE_DELAY = 1000; // 1 second delay for text checking\n\nclass EmailEditor {\n  constructor() {\n    this.suggestions = [];\n    this.observer = null;\n    this.composerElement = null;\n    this.isChecking = false;\n    this.errorTimeout = null;\n    this.selectedText = '';\n    this.actionButtons = null;\n    this.initialize();\n  }\n\n  initialize() {\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => this.initializeAfterLoad());\n    } else {\n      this.initializeAfterLoad();\n    }\n\n    window.addEventListener('load', () => this.checkExistingComposers());\n    window.addEventListener('hashchange', () => this.checkExistingComposers());\n  }\n\n  initializeAfterLoad() {\n    this.observeEmailComposer();\n    this.setupMessageListener();\n    this.createStyleSheet();\n    setTimeout(() => this.checkExistingComposers(), 1000);\n  }\n\n  checkExistingComposers() {\n    const composers = document.querySelectorAll(EMAIL_COMPOSER_SELECTOR);\n    composers.forEach(composer => {\n      if (!composer.hasAttribute('data-email-assistant')) {\n        composer.setAttribute('data-email-assistant', 'true');\n        this.attachEditorListeners(composer);\n        this.addActionButtons(composer);\n      }\n    });\n  }\n\n  observeEmailComposer() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n\n    this.observer = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList' || mutation.type === 'subtree') {\n          const composers = document.querySelectorAll(EMAIL_COMPOSER_SELECTOR);\n          composers.forEach(composer => {\n            if (!composer.hasAttribute('data-email-assistant')) {\n              composer.setAttribute('data-email-assistant', 'true');\n              this.attachEditorListeners(composer);\n              this.addActionButtons(composer);\n            }\n          });\n        }\n      }\n    });\n\n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  createStyleSheet() {\n    const style = document.createElement('style');\n    style.textContent = `\n      .email-assistant-buttons {\n        position: absolute;\n        right: 10px;\n        top: 5px;\n        display: flex;\n        gap: 8px;\n        z-index: 999;\n      }\n\n      .email-assistant-button {\n        background-color: #fff;\n        border: 1px solid #dadce0;\n        border-radius: 4px;\n        color: #5f6368;\n        cursor: pointer;\n        font-family: 'Google Sans', Roboto, Arial, sans-serif;\n        font-size: 13px;\n        font-weight: 500;\n        height: 32px;\n        min-width: 80px;\n        padding: 0 16px;\n        transition: all 0.2s;\n      }\n\n      .email-assistant-button:hover {\n        background-color: #f8f9fa;\n        border-color: #1a73e8;\n        color: #1a73e8;\n      }\n\n      .email-assistant-button:active {\n        background-color: #f1f3f4;\n      }\n\n      .suggestion-overlay {\n        position: fixed;\n        width: 320px;\n        max-height: calc(100vh - 100px);\n        overflow-y: auto;\n        background: white;\n        border: 1px solid #dadce0;\n        border-radius: 8px;\n        padding: 16px;\n        box-shadow: 0 2px 6px rgba(60,64,67,0.15), 0 1px 2px rgba(60,64,67,0.1);\n        z-index: 1000;\n        font-family: 'Google Sans',Roboto,Arial,sans-serif;\n      }\n\n      .suggestion-item {\n        margin-bottom: 16px;\n        padding: 12px;\n        border: 1px solid #e8eaed;\n        border-radius: 8px;\n        background: #fff;\n        transition: all 0.2s;\n      }\n\n      .suggestion-item:hover {\n        border-color: #dadce0;\n        box-shadow: 0 1px 3px rgba(60,64,67,0.1);\n      }\n\n      .suggestion-type {\n        color: #5f6368;\n        font-size: 12px;\n        text-transform: uppercase;\n        margin-bottom: 8px;\n        font-weight: 500;\n        letter-spacing: 0.5px;\n      }\n\n      .suggestion-message {\n        color: #202124;\n        margin: 8px 0;\n        font-size: 14px;\n        line-height: 20px;\n      }\n\n      .suggestion-diff {\n        background: #f8f9fa;\n        padding: 12px;\n        border-radius: 4px;\n        margin: 12px 0;\n        font-family: 'Google Sans Mono', monospace;\n        font-size: 13px;\n      }\n\n      .original-text {\n        color: #d93025;\n        text-decoration: line-through;\n        margin-bottom: 6px;\n      }\n\n      .arrow {\n        color: #5f6368;\n        margin: 6px 0;\n        font-size: 14px;\n      }\n\n      .replacement-text {\n        color: #188038;\n        font-weight: 500;\n      }\n\n      .suggestion-button {\n        background: white;\n        color: #1a73e8;\n        border: 1px solid #dadce0;\n        padding: 6px 12px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 13px;\n        font-weight: 500;\n        margin-top: 8px;\n        transition: all 0.2s;\n      }\n\n      .suggestion-button:hover {\n        background: #f4f8fe;\n        border-color: #1a73e8;\n      }\n\n      .suggestion-button:active {\n        background: #e8f0fe;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  addActionButtons(composer) {\n    // Find Gmail's toolbar\n    let toolbar = composer.closest('.editable')?.parentElement?.querySelector('.gU.Up') ||\n                 composer.closest('.Am.Al')?.parentElement?.querySelector('.gU.Up');\n\n    if (!toolbar) {\n      // Create our own toolbar if Gmail's isn't found\n      toolbar = document.createElement('div');\n      toolbar.className = 'gU Up';\n      toolbar.style.position = 'relative';\n      composer.parentElement.insertBefore(toolbar, composer);\n    }\n\n    // Remove existing buttons if any\n    const existingButtons = toolbar.querySelector('.email-assistant-buttons');\n    if (existingButtons) {\n      existingButtons.remove();\n    }\n\n    const buttonsContainer = document.createElement('div');\n    buttonsContainer.className = 'email-assistant-buttons';\n\n    const grammarButton = document.createElement('button');\n    grammarButton.className = 'email-assistant-button';\n    grammarButton.textContent = 'Grammar Fix';\n    grammarButton.onclick = () => this.checkGrammar();\n\n    const reorganizeButton = document.createElement('button');\n    reorganizeButton.className = 'email-assistant-button';\n    reorganizeButton.textContent = 'Reorganize';\n    reorganizeButton.onclick = () => this.reorganizeEmail();\n\n    buttonsContainer.appendChild(grammarButton);\n    buttonsContainer.appendChild(reorganizeButton);\n    toolbar.appendChild(buttonsContainer);\n\n    this.actionButtons = buttonsContainer;\n  }\n\n  attachEditorListeners(editor) {\n    editor.addEventListener('focus', (e) => {\n      this.composerElement = e.target;\n    });\n  }\n\n  async checkGrammar() {\n    if (!this.composerElement || this.isChecking) return;\n\n    const text = this.composerElement.value || this.composerElement.innerText;\n    if (!text.trim()) return;\n\n    this.isChecking = true;\n\n    try {\n      const response = await chrome.runtime.sendMessage({\n        action: 'checkText',\n        text: text.trim()\n      });\n\n      if (response.error) {\n        console.error('Email Assistant:', response.error);\n        return;\n      }\n\n      this.suggestions = response.grammar || [];\n      if (this.suggestions.length > 0) {\n        this.showSuggestions();\n      }\n    } catch (error) {\n      console.error('Email Assistant Error:', error);\n    } finally {\n      this.isChecking = false;\n    }\n  }\n\n  async reorganizeEmail() {\n    if (!this.composerElement || this.isChecking) return;\n\n    const text = this.composerElement.value || this.composerElement.innerText;\n    if (!text.trim()) return;\n\n    this.isChecking = true;\n\n    try {\n      const response = await chrome.runtime.sendMessage({\n        action: 'checkText',\n        text: text.trim()\n      });\n\n      if (response.error) {\n        console.error('Email Assistant:', response.error);\n        return;\n      }\n\n      this.suggestions = response.style || [];\n      if (this.suggestions.length > 0) {\n        this.showSuggestions();\n      }\n    } catch (error) {\n      console.error('Email Assistant Error:', error);\n    } finally {\n      this.isChecking = false;\n    }\n  }\n\n  createSuggestionItem(suggestion) {\n    const suggestionDiv = document.createElement('div');\n    suggestionDiv.className = 'suggestion-item';\n\n    const typeDiv = document.createElement('div');\n    typeDiv.className = 'suggestion-type';\n    typeDiv.textContent = suggestion.type.charAt(0).toUpperCase() + suggestion.type.slice(1);\n\n    const messageDiv = document.createElement('div');\n    messageDiv.className = 'suggestion-message';\n    messageDiv.textContent = suggestion.message;\n\n    const diffDiv = document.createElement('div');\n    diffDiv.className = 'suggestion-diff';\n    diffDiv.innerHTML = `\n      <div class=\"original-text\">${suggestion.original}</div>\n      <div class=\"arrow\">→</div>\n      <div class=\"replacement-text\">${suggestion.replacement}</div>\n    `;\n\n    const button = document.createElement('button');\n    button.className = 'suggestion-button';\n    button.textContent = 'Apply Fix';\n    button.onclick = () => this.applySuggestion(suggestion);\n\n    suggestionDiv.appendChild(typeDiv);\n    suggestionDiv.appendChild(messageDiv);\n    suggestionDiv.appendChild(diffDiv);\n    suggestionDiv.appendChild(button);\n\n    return suggestionDiv;\n  }\n\n\n  showSuggestions() {\n    if (!this.composerElement || !this.suggestions.length) {\n      return;\n    }\n\n    const overlay = document.createElement('div');\n    overlay.id = 'email-assistant-overlay';\n    overlay.className = 'suggestion-overlay';\n\n    this.suggestions.forEach(suggestion => {\n      const suggestionItem = this.createSuggestionItem(suggestion);\n      overlay.appendChild(suggestionItem);\n    });\n\n    this.positionOverlayNextToComposer(overlay);\n  }\n\n  positionOverlayNextToComposer(overlay) {\n    this.hideSuggestions();\n\n    if (!this.composerElement) return;\n\n    // Get the composer's dimensions and position\n    const composerRect = this.composerElement.getBoundingClientRect();\n    const scrollX = window.scrollX || document.documentElement.scrollLeft;\n    const scrollY = window.scrollY || document.documentElement.scrollTop;\n\n    // Position the overlay to the right of the composer\n    overlay.style.position = 'absolute';\n    overlay.style.left = `${composerRect.right + scrollX + 20}px`;\n    overlay.style.top = `${composerRect.top + scrollY}px`;\n\n    document.body.appendChild(overlay);\n\n    // Adjust position if overlay goes off screen\n    const overlayRect = overlay.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    // If overlay goes off the right edge, position it to the left of the composer\n    if (overlayRect.right > viewportWidth) {\n      overlay.style.left = `${composerRect.left + scrollX - overlayRect.width - 20}px`;\n    }\n\n    // If overlay goes off the bottom, align it with the bottom of the viewport\n    if (overlayRect.bottom > viewportHeight) {\n      overlay.style.top = `${Math.max(0, viewportHeight - overlayRect.height + scrollY - 20)}px`;\n    }\n  }\n\n  applySuggestion(suggestion) {\n    if (!this.composerElement) return;\n\n    const text = this.composerElement.innerText;\n    const newText = text.replace(suggestion.original, suggestion.replacement);\n\n    const selection = window.getSelection();\n    const range = selection.getRangeAt(0);\n    const cursorPosition = range.startOffset;\n\n    this.composerElement.innerText = newText;\n\n    const newRange = document.createRange();\n    newRange.setStart(this.composerElement.firstChild, cursorPosition);\n    newRange.collapse(true);\n    selection.removeAllRanges();\n    selection.addRange(newRange);\n\n    this.suggestions = this.suggestions.filter(s =>\n      s.original !== suggestion.original || s.message !== suggestion.message\n    );\n\n    if (this.suggestions.length > 0) {\n      this.showSuggestions();\n    } else {\n      this.hideSuggestions();\n    }\n\n    const inputEvent = new Event('input', { bubbles: true });\n    this.composerElement.dispatchEvent(inputEvent);\n  }\n\n  hideSuggestions() {\n    const overlay = document.getElementById('email-assistant-overlay');\n    if (overlay) {\n      overlay.remove();\n    }\n  }\n\n  setupMessageListener() {\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      switch (message.action) {\n        case 'getEmailText':\n          if (this.composerElement) {\n            sendResponse({ text: this.composerElement.value || this.composerElement.innerText });\n          } else {\n            sendResponse({ error: 'No email composer found' });\n          }\n          break;\n        case 'showError':\n          console.error('Email Assistant:', message.error);\n          sendResponse({ success: true });\n          break;\n      }\n      return true;\n    });\n  }\n}\n\ntry {\n  const initializeExtension = () => {\n    if (!window.emailEditor) {\n      window.emailEditor = new EmailEditor();\n    }\n  };\n\n  initializeExtension();\n  setTimeout(initializeExtension, 1000);\n\n  const retryTimes = [2000, 4000, 6000];\n  retryTimes.forEach(delay => {\n    setTimeout(() => {\n      if (!document.querySelector(EMAIL_COMPOSER_SELECTOR)) {\n        initializeExtension();\n      }\n    }, delay);\n  });\n} catch (error) {\n  console.error('Email Assistant: Error during initialization:', error);\n}\n\nwindow.addEventListener('message', (event) => {\n  if (event.data.type === 'applySuggestion' && window.emailEditor) {\n    window.emailEditor.applySuggestion(event.data.suggestion);\n  }\n});"],"names":[],"sourceRoot":""}